// Firestore Rules
// Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic read access for authenticated users
    match /{document=**} {
      allow read: if request.auth != null;
    }
    
    // User document rules
    match /users/{userId} {
      // Allow users to write to their own document
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update friends arrays in other users' documents
      allow update: if request.auth != null && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
                     request.resource.data.friends.hasAll(resource.data.friends);
    }
    
    // Friend requests rules
    match /friendRequests/{requestId} {
      // Allow users to create friend requests
      allow create: if request.auth != null && 
                     request.resource.data.senderId == request.auth.uid;
      
      // Allow users to update friend requests they're involved with
      allow update: if request.auth != null && 
                     (resource.data.senderId == request.auth.uid || 
                      resource.data.receiverId == request.auth.uid);
      
      // Allow users to delete their own requests
      allow delete: if request.auth != null && 
                     resource.data.senderId == request.auth.uid;
    }
  }
}

// Realtime Database Rules
// Copy these rules to your Firebase Console > Realtime Database > Rules

{
  "rules": {
    "status": {
      "$uid": {
        // Allow users to read all status data
        ".read": "auth != null",
        // Allow users to write only to their own status
        ".write": "auth != null && auth.uid == $uid",
        "sessions": {
          "$sessionId": {
            ".write": "auth != null && auth.uid == $uid"
          }
        }
      },
      // Allow authenticated users to read all status data
      ".read": "auth != null"
    }
  }
} 